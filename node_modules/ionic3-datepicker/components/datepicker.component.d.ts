import { EventEmitter } from '@angular/core';
import { NavParams, ViewController } from 'ionic-angular';
import { DateService } from './datepicker.service';
import { FormControl } from '@angular/forms';
export declare class DatePickerComponent {
    viewCtrl: ViewController;
    navParams: NavParams;
    DatepickerService: DateService;
    config: {
        okText: string;
        cancelText: string;
        min: Date;
        max: Date;
        ionChanged: EventEmitter<Date>;
        ionSelected: EventEmitter<Date>;
        ionCanceled: EventEmitter<void>;
        headerClasses: string[];
        bodyClasses: string[];
        date: Date;
        disabledDates: Date[];
        markDates: Date[];
        showMaxAndMin: boolean;
    };
    selectedDate: Date;
    dateList: Date[];
    cols: number[];
    rows: number[];
    weekdays: string[];
    months: string[];
    years: string[];
    active: boolean;
    private tempDate;
    private today;
    yearsMaxMin: number[];
    selectedMonth: any;
    selectedYear: any;
    monthChanged: FormControl;
    yearChanged: FormControl;
    nextDisabled: boolean;
    previousDisabled: boolean;
    private maxYear;
    private minYear;
    constructor(viewCtrl: ViewController, navParams: NavParams, DatepickerService: DateService);
    initialize(): void;
    private initSelectBoxes();
    private initSelectBoxListener();
    checkDisableButtons(selectedMonth: any, selectedYear: any): void;
    createDateList(selectedDate: Date): void;
    getDate(row: number, col: number): Date;
    getDateAsDay(row: number, col: number): number;
    isDisabled(date: Date): boolean;
    isMark(date: Date): boolean;
    isActualDate(date: Date): boolean;
    isActualMonth(month: number): boolean;
    isActualYear(year: number): boolean;
    isSelectedDate(date: Date): boolean;
    isSelectedMonth(month: number): boolean;
    isSelectedYear(year: number): boolean;
    selectDate(date: Date): void;
    getSelectedWeekday(): string;
    getSelectedMonth(date?: Date): string;
    getTempMonth(): string;
    getTempYear(): number;
    getSelectedDate(): number;
    getSelectedYear(): number;
    onCancel(e: Event): void;
    onDone(e: Event): void;
    selectMonthOrYear(): void;
    private areEqualDates(dateA, dateB);
    limitTo(arr: Array<string> | string, limit: number): Array<string> | string;
    getMonthRows(): {}[];
    nextMonth(): void;
    prevMonth(): void;
    private setDateAfterSelection(testDate);
}
